{"ast":null,"code":"const API_URL = '/api';\n\n// 获取爱心计数\nexport async function getLoveCount() {\n  try {\n    const response = await fetch(`${API_URL}/love/count`);\n    const data = await response.json();\n    return data.count;\n  } catch (error) {\n    console.error('获取爱心计数失败:', error);\n    throw error;\n  }\n}\n\n// 增加爱心计数\nexport async function incrementLove() {\n  try {\n    const response = await fetch(`${API_URL}/love/increment`, {\n      method: 'POST'\n    });\n    const data = await response.json();\n    return data.count;\n  } catch (error) {\n    console.error('增加爱心计数失败:', error);\n    throw error;\n  }\n}\n\n// 获取留言列表\nexport async function getComments() {\n  try {\n    const response = await fetch(`${API_URL}/comments`);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('获取留言失败:', error);\n    throw error;\n  }\n}\n\n// 发布留言\nexport async function postComment({\n  username,\n  content,\n  media\n}) {\n  try {\n    const formData = new FormData();\n    formData.append('username', username);\n    formData.append('content', content);\n    if (media) {\n      formData.append('media', media);\n    }\n    const response = await fetch(`${API_URL}/comments`, {\n      method: 'POST',\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error('发布留言失败');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('发布留言失败:', error);\n    throw error;\n  }\n}\n\n// 用户注册\nexport async function registerUser(username) {\n  try {\n    const response = await fetch(`${API_URL}/users/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || '注册失败');\n    }\n    return data;\n  } catch (error) {\n    console.error('用户注册失败:', error);\n    throw error;\n  }\n}\n\n// 用户登录\nexport async function loginUser(username) {\n  try {\n    const response = await fetch(`${API_URL}/users/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || '登录失败');\n    }\n    return data;\n  } catch (error) {\n    console.error('用户登录失败:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["API_URL","getLoveCount","response","fetch","data","json","count","error","console","incrementLove","method","getComments","postComment","username","content","media","formData","FormData","append","body","ok","Error","registerUser","headers","JSON","stringify","loginUser"],"sources":["D:/vue_project/we-love-grace/src/services/api.js"],"sourcesContent":["const API_URL = '/api'\r\n\r\n// 获取爱心计数\r\nexport async function getLoveCount() {\r\n  try {\r\n    const response = await fetch(`${API_URL}/love/count`)\r\n    const data = await response.json()\r\n    return data.count\r\n  } catch (error) {\r\n    console.error('获取爱心计数失败:', error)\r\n    throw error\r\n  }\r\n}\r\n\r\n// 增加爱心计数\r\nexport async function incrementLove() {\r\n  try {\r\n    const response = await fetch(`${API_URL}/love/increment`, {\r\n      method: 'POST'\r\n    })\r\n    const data = await response.json()\r\n    return data.count\r\n  } catch (error) {\r\n    console.error('增加爱心计数失败:', error)\r\n    throw error\r\n  }\r\n}\r\n\r\n// 获取留言列表\r\nexport async function getComments() {\r\n  try {\r\n    const response = await fetch(`${API_URL}/comments`)\r\n    const data = await response.json()\r\n    return data\r\n  } catch (error) {\r\n    console.error('获取留言失败:', error)\r\n    throw error\r\n  }\r\n}\r\n\r\n// 发布留言\r\nexport async function postComment({ username, content, media }) {\r\n  try {\r\n    const formData = new FormData()\r\n    formData.append('username', username)\r\n    formData.append('content', content)\r\n    \r\n    if (media) {\r\n      formData.append('media', media)\r\n    }\r\n    \r\n    const response = await fetch(`${API_URL}/comments`, {\r\n      method: 'POST',\r\n      body: formData\r\n    })\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('发布留言失败')\r\n    }\r\n    \r\n    return await response.json()\r\n  } catch (error) {\r\n    console.error('发布留言失败:', error)\r\n    throw error\r\n  }\r\n}\r\n\r\n// 用户注册\r\nexport async function registerUser(username) {\r\n  try {\r\n    const response = await fetch(`${API_URL}/users/register`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ username })\r\n    })\r\n    \r\n    const data = await response.json()\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(data.error || '注册失败')\r\n    }\r\n    \r\n    return data\r\n  } catch (error) {\r\n    console.error('用户注册失败:', error)\r\n    throw error\r\n  }\r\n}\r\n\r\n// 用户登录\r\nexport async function loginUser(username) {\r\n  try {\r\n    const response = await fetch(`${API_URL}/users/login`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ username })\r\n    })\r\n    \r\n    const data = await response.json()\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(data.error || '登录失败')\r\n    }\r\n    \r\n    return data\r\n  } catch (error) {\r\n    console.error('用户登录失败:', error)\r\n    throw error\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}